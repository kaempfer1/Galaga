#ifndef ENEMY_H
#define ENEMY_H

#include <vector>
#include <random>
#include "SDL.h"
#include "ship.h"

class Bug {
    public:
        Bug();
        ~Bug() {}

        SDL_Point Pos() const;                          // Get posiiton of bug
        void Pos(SDL_Point p);                          // Set position of bug
        SDL_Rect GetRect() const;                       // Get the Rect of sprite
        bool Active();                                  // Return if bug is alive/active
        void Hit();                                     // Called when bug is hit by player
        bool Die();                                     // Bug die routine
        void PlaySound();                               // Play the die sound
        void GetSound(const char *file);                // Load the WAV file
        void Dive();                                    // Attack mode for bug
        int Score();                                    // Get the score value of the bug

        SDL_Rect sprite;
        int x;                                          // Current position on screen
        int y;
        int w = kSpriteScale;                           // Size of sprite on screen
        int h = kSpriteScale;
        double angle{0};                                // Rotation angle of bug sprite
        SDL_Point home;                                 // Home position in formation
        float speed{4.0f};                              // Update speed
        bool alive{true};                               // Bug is alive
        bool fire{false};                               // Bug firing
        int hit{0};                                     // Keep track of the die process
        int value;                                      // Score value for the bug
        bool shield;                                    // Boss bugs take 2 hits to kill
        bool attack{false};                             // Bug in attack mode

        enum PATH{J_PATTERN, S_PATTERN, O_PATTERN};     // Bug attack/dive path
        PATH dive_path;
        enum SIDE{LEFT, RIGHT};                         // Left/Right Side of Formation
        SIDE dive_side;                 
        int dive_pos{0};                                // Position in the dive array

        Mix_Chunk *die_sound = NULL;
        Mix_Chunk *shield_sound = NULL;

        Missile missile;                                // Bug's missile

    private:
        const static std::size_t kSpriteSize{16};       // Sprite size in pixels on Galaga sheet
        const static std::size_t kSpriteScale{42};      // Scale factor for sprites to game screen

        SDL_Rect boss_sprite{109, 37, kSpriteSize, kSpriteSize};            // BOSS bug sprite
        SDL_Rect boss_blue_sprite{109, 55, kSpriteSize, kSpriteSize};       // BOSS blue bug
        SDL_Rect red_sprite{109, 73, kSpriteSize, kSpriteSize};             // Red bug
        SDL_Rect yellow_sprite{109, 91, kSpriteSize, kSpriteSize};          // Yellow bug

        SDL_Rect explode_1_sprite{289, 1, kSpriteSize*2, kSpriteSize*2};    // Bug die explosion sprite 1
        SDL_Rect explode_2_sprite{323, 1, kSpriteSize*2, kSpriteSize*2};    // Bug die sequence exsprite 2
        SDL_Rect explode_3_sprite{357, 1, kSpriteSize*2, kSpriteSize*2};    // Bug die sequence sprite 3
        SDL_Rect explode_4_sprite{391, 1, kSpriteSize*2, kSpriteSize*2};    // Bug die sequence prite 4

        struct Pos { int x, y, a;};                                         // struct dive patterns: x,y (position) and a (angle)
        static const int DIVE_SIZE = 300;

        // Yellow bug J dive pattern
        struct Pos pattern[DIVE_SIZE] = {
            {0,-1,0},{0,-1,10},{0,-1,20},{0,-1,30},         {1,-1,40},{1,-1,50},{1,-1,60},{1,-1,70},        {1,-1,80},{1,-1,90},{1,-1,100},{1,-1,110},      // Launch C pattern
            {1,1,120},{1,1,130},{1,1,140},{1,1,150},        {0,1,160},{0,1,170},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},

            {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    // Diag to middle of screen
            {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},
            {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},
            {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},
            {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},

            {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},        // Drop down
            {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},
            {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},
            {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},

            {0,1,178},{1,1,175},{1,1,173},{0,1,170},    {1,1,165},{1,1,165},{1,1,160},{1,1,160},            {0,1,155},{1,1,155},{1,1,150},{1,1,150},        // Circle back up
            {1,1,145},{1,1,145},{1,1,140},{0,1,140},    {1,1,135},{1,1,135},{1,1,130},{1,1,130},            {1,1,125},{1,1,125},{0,1,120},{1,0,120},
            {1,1,115},{0,1,110},{1,0,105},{1,1,100},    {1,1,95},{1,0,90},{1,0,90},{1,-1,85},               {1,-1,80},{1,0,75},{0,-1,70},{1,-1,65},
            {1,0,60},{0,-1,60},{1,-1,55},{1,-1,55},     {1,-1,50},{1,-1,50},{1,-1,45},{1,-1,45},            {0,-1,40},{1,-1,40},{1,-1,35},{1,-1,35},
            {1,-1,30},{1,-1,30},{1,-1,25},{0,-1,25},    {1,-1,20},{1,-1,20},{1,-1,15},{1,-1,15},            {0,-1,10},{1,-1,18},{1,-1,5},{0,-1,3},
  
            {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},    {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},    {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},                            // Vertical return home
            {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},    {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},    {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},
            {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},    {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},    {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},
            {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},    {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},    {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},
            {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},    {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},    {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},
            {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},    {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},    {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},
            {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},    {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},    {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},
            {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},    {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},    {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},
            {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},    {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0},    {0,-1,0},{0,-1,0},{0,-1,0},{0,-1,0}};

        // Red bug S dive pattern
        struct Pos pattern2[DIVE_SIZE] = {
            {0,-1,0},{0,-1,10},{0,-1,20},{0,-1,30},         {1,-1,40},{1,-1,50},{1,-1,60},{1,-1,70},        {1,-1,80},{1,-1,90},{1,-1,100},{1,-1,110},      // Launch C pattern
            {1,1,120},{1,1,130},{1,1,140},{1,1,150},        {0,1,160},{0,1,170},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},

            {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    // Diag to middle of screen
            {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},
            {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},
            {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},

            {0,1,220},{0,1,210},{0,1,200},{0,1,190},        {0,1,180},{0,1,170},{0,1,160},{1,1,150},        {0,1,160},{0,1,155},{1,1,150},{0,1,160},        // Outside S turn
            {0,1,160},{0,1,155},{1,1,150},{0,1,160},        {0,1,165},{1,1,155},{0,1,165},{0,1,180},        {1,1,165},{0,1,160},{1,1,150},{0,1,140},
            {1,1,135},{1,1,135},{1,1,135},{1,1,135},        {1,1,135},{1,1,135},{1,1,135},{1,1,135},        {1,1,135},{1,1,135},{1,1,135},{1,1,135},
            {1,1,135},{1,1,135},{1,1,135},{1,1,135},        {1,1,135},{1,1,135},{1,1,135},{1,1,135},        {1,1,135},{1,1,135},{1,1,135},{1,1,135},
            {1,1,140},{1,1,145},{1,1,150},{1,1,155},        {1,1,160},{1,1,165},{1,1,0},{1,1,0},            {1,1,0},{1,1,0},{1,1,170},{1,1,175},

            {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,190},{0,1,200},{0,1,210},{0,1,220},        // Drop down

            {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    // Diag to middle of screen
            {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},
            {1,1,225},{1,1,225},{1,1,225},{1,1,225},        {1,1,225},{1,1,225},{1,1,225},{1,1,225},        {1,1,225},{1,1,225},{1,1,225},{1,1,225},

            {1,1,180},{1,1,180},{1,1,180},{1,1,180},        {1,1,180},{1,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},        // Drop down
            {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},
            {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},
            {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,0,180},{0,0,180},{0,0,180},
            {0,0,180},{0,0,180},{0,0,180},{0,0,180},        {0,0,180},{0,0,180},{0,0,180},{0,0,180},        {0,0,180},{0,0,180},{0,0,180},{0,0,180},
            {0,0,180},{0,0,180},{0,0,180},{0,0,180},        {0,0,180},{0,0,180},{0,0,170},{0,0,160},        {0,0,150},{0,0,140},{0,0,130},{0,0,120},
            {0,0,110},{0,0,100},{0,0,90},{0,0,80},          {0,0,70},{0,0,60},{0,0,50},{0,0,40},            {0,0,30},{0,0,20},{0,0,10},{0,0,0},
            {0,0,0},{0,0,0},{0,0,0},{0,0,0},                {0,0,0},{0,0,0},{0,0,0},{0,0,0},                {0,0,0},{0,0,0},{0,0,0},{0,0,0},
            {0,0,0},{0,0,0},{0,0,0},{0,0,0},                {0,0,0},{0,0,0},{0,0,0},{0,0,0},                {0,0,0},{0,0,0},{0,0,0},{0,0,0},
            {0,0,0},{0,0,0},{0,0,0},{0,0,0},                {0,0,0},{0,0,0},{0,0,0},{0,0,0},                {0,0,0},{0,0,0},{0,0,0},{0,0,0}};

        // BOSS bug circle dive pattern
        struct Pos pattern3[DIVE_SIZE] = {
            {0,-1,0},{0,-1,10},{0,-1,20},{0,-1,30},         {1,-1,40},{1,-1,50},{1,-1,60},{1,-1,70},        {1,-1,80},{1,-1,90},{1,-1,100},{1,-1,110},      // Launch C pattern
            {1,1,120},{1,1,130},{1,1,140},{1,1,150},        {0,1,160},{0,1,170},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},

            {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    // Diag to middle of screen
            {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},
            {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},

            {-1,0,228},{-1,1,230},{-1,0,233},{-1,1,235},    {-1,0,238},{-1,1,240},{-1,0,243},{-1,1,245},    {-1,0,248},{-1,1,250},{-1,0,253},{-1,1,255},    // Start up loop to inside
            {-1,0,258},{-1,1,260},{-1,0,263},{-1,1,265},    {-1,0,268},{-1,1,270},{-1,0,273},{-1,1,275},    {-1,0,285},{-1,0,290},{-1,0,295},{-1,0,300},    // Bottom of Loop
            {-1,-1,310},{0,-1,280},{-1,-1,285},{0,-1,290},  {-1,-1,295},{0,-1,300},{-1,-1,305},{0,-1,310},  {-1,-1,315},{0,-1,320},{-1,-1,325},{0,-1,330},
//            {0,-1,340},{0,-1,345},{0,-1,350},{0,-1,355},    {0,-1,358},{0,-1,0},{0,-1,0},{0,-1,2},          {0,-1,5},{0,-1,10},{0,-1,15},{0,-1,20},         // Up side of loop
            {0,-1,340},{0,0,345},{0,-1,350},{0,0,355},    {0,-1,358},{0,-1,0},{0,0,0},{0,-1,2},          {0,0,5},{0,-1,10},{0,0,15},{0,-1,20},         // Up side of loop
//            {1,-1,25},{0,-1,30},{1,-1,35},{1,-1,40},        {1,-1,45},{0,-1,50},{1,-1,55},{1,-1,60},        {1,-1,65},{0,-1,70},{1,-1,75},{1,-1,60},
            {1,0,25},{0,-1,30},{1,0,35},{1,-1,40},        {1,-1,45},{0,0,50},{1,-1,55},{1,0,60},        {1,-1,65},{0,0,70},{1,-1,75},{1,0,60},
            {1,0,70},{1,0,75},{1,0,80},{1,0,85},            {1,0,88},{1,0,90},{1,0,95},{1,0,100},           {1,0,105},{1,0,110},{1,0,115},{1,0,120},        // Top of Loop
//            {1,1,125},{1,0,130},{1,1,133},{1,0,135},        {1,1,140},{1,0,145},{1,1,150},{1,0,155},        {1,1,160},{1,0,165},{1,1,170},{1,0,175},        // Down side of loop
            {1,1,125},{1,0,130},{1,1,133},{1,0,135},        {1,1,140},{1,0,145},{1,1,150},{1,0,155},        {1,1,160},{1,1,165},{1,1,170},{1,1,175},        // Down side of loop
            {0,1,178},{0,1,180},{0,1,183},{0,1,185},        {0,1,190},{0,1,195},{0,1,200},{0,1,205},        {0,1,210},{0,1,215},{0,1,220},{0,1,223},

            {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    // Diag to middle of screen
            {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},
            {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},
            {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},    {-1,1,225},{-1,1,225},{-1,1,225},{-1,1,225},

            {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},        // Drop down
            {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},
            {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},
            {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},
            {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},
            {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},
            {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},        {0,1,180},{0,1,180},{0,1,180},{0,1,180},
            {0,1,165},{0,1,150},{0,1,135},{0,1,120},          {0,0,105},{0,0,90},{0,0,75},{0,0,60},            {0,0,45},{0,0,30},{0,0,15},{0,0,0}};
};

class Enemy {
    public:
        Enemy();
        ~Enemy() {}

        void Update();
        void Start();

        float speed{4.0f};

        static const int HIVE_SIZE = 40;
        static const int MAX_BOSS_BUGS = 4;
        static const int MAX_RED_BUGS = 16;
        static const int MAX_YELLOW_BUGS = 20;

        static const int BOSS_SCORE = 150;
        static const int RED_SCORE = 80;
        static const int YELLOW_SCORE = 50;

        Bug bugs[HIVE_SIZE];

        int hive{0};                                                    // Total # of bugs in formation
        int max_attackers{0};                                           // Maximum attackers per level
        int attackers{0};                                               // # of active attacking bugs

    private:
        const static std::size_t kBugPlatoon_y{120};                    // Y Position of the bug platoon
        const static std::size_t kBugSpacing{4};                        // Spacing between bug sprites
        const static std::size_t kSpriteSize{16};                       // Galage sprite size in pixels
        const static std::size_t kSpriteScale{42};                      // Scale factor for sprites to game screen

        SDL_Point platoon;                                              // Position in platoon formation
        SDL_Rect boss_sprite{109, 37, kSpriteSize, kSpriteSize};        // Boss enemy sprite
        SDL_Rect boss_blue_sprite{109, 55, kSpriteSize, kSpriteSize};   // Boss blue enemy
        SDL_Rect red_sprite{109, 73, kSpriteSize, kSpriteSize};         // Red enemy
        SDL_Rect yellow_sprite{109, 91, kSpriteSize, kSpriteSize};      // Yellow enemy

        SDL_Rect down_missile_sprite{313, 136, 3, kSpriteSize};         // Down missile

//        std::random_device dev;
        std::mt19937 engine;
        std::uniform_int_distribution<int> random_bug;
};


// DEBUG
class NewEnemy {
    public:
        NewEnemy() {}
        ~NewEnemy() {}

    private:
};

// DEBUG
class Boss : public NewEnemy {
    public:
        Boss();
        ~Boss() {}

        SDL_Rect GetRect() const;                       // Get the Rect of sprite
        void Hit();

        float speed{4.0f};
        bool alive{true};
        int x;
        int y;
        int w = kSpriteScale;
        int h = kSpriteScale;
        int value;

    private:
        const static std::size_t kSpriteScale{42};      // Scale factor for sprites to game screen
};

#endif